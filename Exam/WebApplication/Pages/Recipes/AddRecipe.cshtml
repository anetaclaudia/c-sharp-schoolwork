@page
@using Domain
@using System.ComponentModel
@model WebApplication.Pages.Recipes.AddRecipe

@{
    ViewData["Title"] = "Add new recipe";
}

<head>
    <title>Add recipe</title>
</head>
<body>
<form method="post">
    <div class="form-group">
        <label>Recipe name</label>
        <input asp-for="RecipeName" class="form-control" placeholder="Enter recipe name">
    </div>
    <div class="form-group">
        <label>Preparation time in minutes</label>
        <input type="number" min="1" asp-for="PreparationTime" class="form-control" placeholder="Enter preparation time in minutes">
    </div>
    <div class="form-group">
        <label>How many does it serve?</label>
        <input type="number" min="1" asp-for="ServingAmount" class="form-control" placeholder="Enter, how many people does it serve">
    </div>
    <div class="form-group">
        <label>Choose category for your recipe</label>
        <select asp-for="RecipeCategory" class="form-control">
            @foreach (RecipeCategory? category in Enum.GetValues(typeof(RecipeCategory)))
            {
                <option value="@category">@GetCategoryDescription(category)</option>
            }
        </select>
    </div>
    
    
    <div class="row">
        <div class="col" id="nameDiv">
            <label>Ingredient name</label>
            <input type="text" minlength="1" class="form-control" placeholder="Enter ingredient name" name="Ingredients[0].Name" value="" required requiredToAdd>
        </div>
        
        <div class="col" id="amountPerServingDiv">
            <label>Ingredient amount</label>
            <input type="number" min="1" class="form-control" placeholder="Enter ingredient amount" name="Ingredients[0].AmountPerServing" value="" required requiredToAdd>
        </div>
        
        <div class="col" id="measurementTypeDiv">
            <label>Measurement type</label>
            <select class="form-control" name="Ingredients[0].Unit">
                @foreach (Unit? unit in Enum.GetValues(typeof(Unit)))
                {
                    <option value="@unit">@unit</option>
                }
            </select>
        </div>
        <div class="col">
            <input type="button" value="Add an ingredient" class="add btn-primary" id="add" />
        </div>

    </div>
    
    <div class="form-group">
        <label>How do you prepare this recipe?</label>
            <textarea asp-for="Preparation" class="form-control" rows="5"></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
<div>
    <a asp-page="/Recipes/Recipes">Back to List</a>
</div>
</body>


@section Scripts
{ 
     <script>
            $(function () {
                var nextId = @Model.Ingredients!.Count();
                $('#add').on('click', function () {
                    let valid = true;
                      $('[requiredToAdd]').each(function() {
                        if ($(this).is(':invalid') || !$(this).val()) valid = false;
                      })
                    if (!valid) return
                    if (nextId === 0) { // for first it doesn't automatically increase
                        nextId = 1
                    }
                    var name = $('<input type="text" class="form-control" placeholder="Enter ingredient name" name="Ingredients[' + nextId.toString() + '].Name" value="" requiredToAdd>\r\n');
                    var amountPerServing = $('<input type="number" min="1" class="form-control" placeholder="Enter ingredient amount" name="Ingredients[' + nextId.toString() + '].AmountPerServing" value="" requiredToAdd>\r\n');
                    var measurementType =$('<select class="form-control" name="Ingredients[' + nextId.toString() + '].Unit" >\r\n')
                    @foreach (Unit? unit in Enum.GetValues(typeof(Unit)))
                    {
                        @:measurementType.append('<option value="@unit">@unit</option>\r\n')
                    }
                    measurementType.append('</select>\r\n')
                    $("#nameDiv").append(name);
                    $("#amountPerServingDiv").append(amountPerServing);
                    $("#measurementTypeDiv").append(measurementType);
                    nextId++;
                });
            });
    </script>

}

    @functions
    {
        string GetCategoryDescription(RecipeCategory? category)
        {
            return category!.GetAttributeOfType<DescriptionAttribute>()!.Description;
        }
        
        string GetUnitDescription(Unit? unit)
        {
            return unit!.GetAttributeOfType<DescriptionAttribute>()!.Description;
        }
    }